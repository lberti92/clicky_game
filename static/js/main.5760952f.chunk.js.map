{"version":3,"sources":["components/MinionPictures.js","components/Scores.js","components/Header.js","components/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["MinionPics","props","className","src","image","alt","onClick","score","id","Scores","message","newscore","yscore","Header","Wrapper","children","App","state","minions","shuffleMinions","array","sort","a","b","Math","random","setState","handleClick","newScore","minionClicked","filter","minion","console","log","clicked","i","length","updateScore","this","map","picture","name","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qPAeeA,MAbf,SAAoBC,GAChB,OACI,yBAAKC,UAAU,QACX,yBAAKA,UAAY,eACjBC,IAAKF,EAAMG,MACXC,IAAKJ,EAAMC,UACTI,QAAS,kBAAML,EAAMM,MAAMN,EAAMO,SCGhCC,MATf,SAAgBR,GACZ,OACI,yBAAKC,UAAU,oBACf,4BAAKD,EAAMS,SACX,0CAAgBT,EAAMU,SAAtB,kBAA+CV,EAAMW,OAArD,OCKOC,MATf,WACE,OACE,yBAAKX,UAAU,UACb,kEACA,yG,OCOSY,MAXf,SAAiBb,GACf,OACE,yBAAKC,UAAU,OACd,yBAAKA,UAAU,UACd,yBAAKA,UAAU,UACb,yBAAKA,UAAU,WAAWD,EAAMc,aCkFzBC,G,iNAhFbC,MAAQ,CACNC,UACAP,SAAU,EACVJ,MAAO,EACPG,QAAS,I,EAGXS,eAAiB,SAAAC,GACf,IAAMF,EAAUE,EAAMC,MAAK,SAAUC,EAAGC,GACtC,OAAOC,KAAKC,SAAW,MAEzB,EAAKC,SAAS,CAAER,a,EAGlBS,YAAc,SAACnB,GACb,IAAIoB,EAAW,EAAKX,MAAMV,MAAQ,EAClC,EAAKmB,SAAS,CAAEnB,MAAOqB,IAEvB,IAAMV,EAAU,EAAKD,MAAMC,QACrBW,EAAgBX,EAAQY,QAAO,SAAAC,GAAM,OAAIA,EAAOvB,KAAOA,KAI7D,GAFAwB,QAAQC,IAAR,yBAA8BzB,EAA9B,aAAqCoB,IAEjCC,EAAc,GAAGK,QAAS,CAC5B,EAAKR,SAAS,CAAEhB,QAAS,+CAEzB,IAAK,IAAIyB,EAAI,EAAGA,EAAIjB,EAAQkB,OAAQD,IAClCjB,EAAQiB,GAAGD,SAAU,EAEvBF,QAAQC,IAAI,WAAYL,GACxBI,QAAQC,IAAI,WAAY,EAAKhB,MAAMN,UACnCqB,QAAQC,IAAI,EAAKhB,MAAMV,OACvB,IAAI8B,EAAc,EAAKpB,MAAMV,MAAQ,EAAKU,MAAMN,SAAY,EAAKM,MAAMV,MAAQ,EAAKU,MAAMN,SAC1F,EAAKe,SAAS,CACZR,UACAP,SAAU0B,EACV9B,MAAO,SAGTsB,EAAc,GAAGK,SAAU,EACvBN,GAAY,GACd,EAAKF,SAAS,CAAEhB,QAAS,2BAER,KAAbkB,GACJ,EAAKF,SAAS,CAAEhB,QAAS,iCACzB,EAAKgB,SAAS,CACZR,UACAP,SAAUiB,EACVrB,MAAO,KAIb,EAAKY,eAAeD,I,wEAGZ,IAAD,OACP,OACE,yBAAKhB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CACEQ,QAAS4B,KAAKrB,MAAMP,QACpBC,SAAU2B,KAAKrB,MAAMN,SACrBC,OAAQ0B,KAAKrB,MAAMV,QACrB,kBAAC,EAAD,KACG+B,KAAKrB,MAAMC,QAAQqB,KAAI,SAAAR,GAAM,OAC5B,kBAAC,EAAD,CACE7B,UAAU,QACVE,MAAO2B,EAAOS,QACdC,KAAMV,EAAOU,KACbjC,GAAIuB,EAAOvB,GACXkC,IAAKX,EAAOvB,GACZD,MAAO,EAAKoB,uB,GAxERgB,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.5760952f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction MinionPics(props) {\r\n    return (\r\n        <div className=\"card\">\r\n            <img className = \"card-img-top\" \r\n            src={props.image} \r\n            alt={props.className} \r\n              onClick={() => props.score(props.id)}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default MinionPics;","import React from \"react\";\r\n\r\nfunction Scores(props) {\r\n    return (\r\n        <div className=\"targetScoreValue\">\r\n        <h3>{props.message}</h3>\r\n        <h3>Top Score: {props.newscore} | Your Score: {props.yscore} </h3>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scores;","import React from \"react\";\n\nfunction Header() {\n  return (\n    <div className=\"header\">\n      <h1>Welcome to the Minions Clicky Game</h1>\n      <p>Click on an image to earn points, but don't click on any more than once!</p>\n    </div>\n  )\n};\n\nexport default Header;\n","import React from \"react\";\n\nfunction Wrapper(props) {\n  return (\n    <div className=\"row\">\n     <div className=\"col-1\"></div>\n      <div className=\"col-10\">\n        <div className=\"wrapper\">{props.children}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default Wrapper;\n","import React, { Component } from \"react\";\nimport MinionPics from \"./components/MinionPictures\";\nimport Scores from \"./components/Scores\";\nimport Header from \"./components/Header\"\nimport minions from \"./minions.json\";\nimport Wrapper from \"./components/Wrapper\"\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    minions,\n    newscore: 0,\n    score: 0,\n    message: \"\"\n  }\n\n  shuffleMinions = array => {\n    const minions = array.sort(function (a, b) {\n      return Math.random() - 0.5;\n    })\n    this.setState({ minions })\n  }\n\n  handleClick = (id) => {\n    let newScore = this.state.score + 1;\n    this.setState({ score: newScore })\n\n    const minions = this.state.minions;\n    const minionClicked = minions.filter(minion => minion.id === id);\n\n    console.log(`in handleClick ${id}  ${newScore}`);\n\n    if (minionClicked[0].clicked) {\n      this.setState({ message: \"You guessed incorrectly. Please try again.\" });\n\n      for (let i = 0; i < minions.length; i++) {\n        minions[i].clicked = false;\n      }\n      console.log(\"NEWSCORE\", newScore);\n      console.log(\"newscore\", this.state.newscore)\n      console.log(this.state.score)\n      let updateScore =(this.state.score > this.state.newscore) ? this.state.score : this.state.newscore;\n      this.setState({\n        minions,\n        newscore: updateScore,\n        score: 0\n      })\n    } else {\n      minionClicked[0].clicked = true;\n      if (newScore <= 11){\n        this.setState({ message: \"You guessed correctly\" });\n      } else {\n        if (newScore === 12)\n        this.setState({ message: \"Congratulations!!  You Won!!\" });\n        this.setState({\n          minions,\n          newscore: newScore,\n          score: 0\n        })\n      }\n    }\n    this.shuffleMinions(minions)\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Scores\n          message={this.state.message}\n          newscore={this.state.newscore}\n          yscore={this.state.score} />\n        <Wrapper>\n          {this.state.minions.map(minion => (\n            <MinionPics\n              className=\"image\"\n              image={minion.picture}\n              name={minion.name}\n              id={minion.id}\n              key={minion.id}\n              score={this.handleClick}\n            />\n          ))}\n        </Wrapper>\n\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}